// 像素光 input:
// position_ws
// normal_normalized_ws
// view_dir_ws
// diffuse
// specular
// roughness2_minus_one
// roughness2
// normalization_term
// shadow_mask


// 顶点光 input:
// position_ws
// normal_ws



float3 color = 0;

// 像素光
#ifdef _ADDITIONAL_LIGHTS

int numLights = GetAdditionalLightsCount();
for(int lightIndex = 0; lightIndex < numLights; lightIndex++){
	Light light = GetAdditionalLight(lightIndex, position_ws, shadow_mask);
	
	half3 light_color = light.color;
	half3 light_dir_ws = light.direction;
	half light_attenuation = light.distanceAttenuation * light.shadowAttenuation;
	
	half NoL = saturate(dot(normal_normalized_ws, light_dir_ws));
	half3 radiance = light.color * (light_attenuation * NoL);
	
	float3 half_dir_ws = SafeNormalize(float3(light_dir_ws) + float3(view_dir_ws));
	float NoH = saturate(dot(normal_normalized_ws, half_dir_ws));
	half LoH = saturate(dot(light_dir_ws, half_dir_ws));
	
	color += CustomLightingPhysicallyBased(diffuse, specular, radiance, roughness2_minus_one, roughness2, normalization_term, NoH, LoH);
}


#endif




// 顶点光
#ifdef _ADDITIONAL_LIGHTS_VERTEX
	half3 vertexLight = VertexLighting(position_ws, normal_ws);
    color += vertexLight * diffuse;
#endif

return color;


